{"version":3,"sources":["beep01.mp3","App.js","components/Break.js","components/Session.js","components/Counter.js","serviceWorker.js","index.js"],"names":["module","exports","interval","Break","className","style","textAlign","onClick","this","props","plus","breakLength","minus","Component","Session","bind","sessionLength","Counter","redGreenColor","color","totalSeconds","title","timer","startOrPause","refresh","App","state","breakInSeconds","breakInMinutes","sessionInSeconds","sessionInMinutes","isSession","shouldStart","countDown","playAudio","setState","setInterval","clearInterval","Audio","soundFile","play","secs","mins","handleBreakPlus","handleBreakMinus","handleSessionPlus","handleSessionMinus","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d5f7346a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beep01.b76b0645.mp3\";","import React from \"react\";\r\nimport Break from \"./components/Break\";\r\nimport Session from \"./components/Session\";\r\nimport Counter from \"./components/Counter\";\r\nimport soundFile from \"./beep01.mp3\";\r\nimport \"./App.css\";\r\n\r\nvar interval;\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      breakInSeconds: 5 * 60,\r\n      breakInMinutes: 5,\r\n      sessionInSeconds: 25 * 60,\r\n      sessionInMinutes: 25,\r\n      isSession: false,\r\n      shouldStart: true,\r\n    };\r\n    this.countDown = this.countDown.bind(this);\r\n    this.playAudio = this.playAudio.bind(this);\r\n  }\r\n\r\n  handleBreakPlus() {\r\n    if (this.state.breakInMinutes < 60 && this.state.shouldStart) {\r\n      this.setState({\r\n        breakInSeconds: this.state.breakInMinutes * 60 + 60,\r\n        breakInMinutes: this.state.breakInMinutes + 1,\r\n      });\r\n    }\r\n  }\r\n  handleSessionPlus() {\r\n    if (this.state.sessionInMinutes < 60 && this.state.shouldStart) {\r\n      this.setState({\r\n        sessionInSeconds: this.state.sessionInMinutes * 60 + 60,\r\n        sessionInMinutes: this.state.sessionInMinutes + 1,\r\n      });\r\n    }\r\n  }\r\n  handleBreakMinus() {\r\n    if (this.state.breakInMinutes > 1 && this.state.shouldStart) {\r\n      this.setState({\r\n        breakInSeconds: this.state.breakInMinutes * 60 - 60,\r\n        breakInMinutes: this.state.breakInMinutes - 1,\r\n      });\r\n    }\r\n  }\r\n  handleSessionMinus() {\r\n    if (this.state.sessionInMinutes > 1 && this.state.shouldStart) {\r\n      this.setState({\r\n        sessionInSeconds: this.state.sessionInMinutes * 60 - 60,\r\n        sessionInMinutes: this.state.sessionInMinutes - 1,\r\n      });\r\n    }\r\n  }\r\n\r\n  countDown() {\r\n    if (this.state.isSession) {\r\n      if (this.state.sessionInSeconds === 0) {\r\n        \r\n        this.setState({\r\n          sessionInSeconds: this.state.sessionInMinutes * 60,\r\n          isSession: !this.state.isSession,\r\n        });\r\n      } else if(this.state.sessionInSeconds ===1){\r\n        this.setState({\r\n          sessionInSeconds: this.state.sessionInSeconds - 1,\r\n        });\r\n        this.playAudio();\r\n      }else {\r\n        this.setState({\r\n          sessionInSeconds: this.state.sessionInSeconds - 1,\r\n        });\r\n      }\r\n    } else {\r\n      if (this.state.breakInSeconds === 0) {\r\n        \r\n        this.setState({\r\n          breakInSeconds: this.state.breakInMinutes * 60,\r\n          isSession: !this.state.isSession,\r\n        });\r\n      } else if(this.state.breakInSeconds === 1){\r\n        this.setState({\r\n          breakInSeconds: this.state.breakInSeconds - 1,\r\n        });\r\n        this.playAudio();\r\n      }else {\r\n        this.setState({\r\n          breakInSeconds: this.state.breakInSeconds - 1,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  startOrPause() {\r\n    if (this.state.shouldStart) {\r\n      interval = setInterval(this.countDown, 1000);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n    this.setState({\r\n      shouldStart: !this.state.shouldStart,\r\n    });\r\n  }\r\n\r\n  refresh() {\r\n    this.setState({\r\n      breakInSeconds: 5 * 60,\r\n      breakInMinutes: 5,\r\n      sessionInSeconds: 25 * 60,\r\n      sessionInMinutes: 25,\r\n      isSession: true,\r\n      shouldStart: true,\r\n    });\r\n    this.startOrPause();\r\n  }\r\n\r\n  playAudio() {\r\n    const audio = new Audio(soundFile);\r\n    audio.play();\r\n  }\r\n\r\n  render() {\r\n    const title = this.state.isSession ? <h2>Session </h2> : <h2>Break</h2>;\r\n    const totalSeconds = this.state.isSession\r\n      ? this.state.sessionInSeconds\r\n      : this.state.breakInSeconds;\r\n    const secs = totalSeconds % 60;\r\n    const mins = (totalSeconds - secs) / 60;\r\n    const timer = (\r\n      <h3>\r\n        {mins < 10 ? \"0\" + mins : mins}:{secs < 10 ? \"0\" + secs : secs}\r\n      </h3>\r\n    );\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div >\r\n          <h1>Pomodoro Clock</h1>\r\n\r\n          <Counter\r\n            title={title}\r\n            timer={timer}\r\n            startOrPause={this.startOrPause.bind(this)}\r\n            refresh={this.refresh.bind(this)}\r\n            totalSeconds={\r\n              this.state.isSession\r\n                ? this.state.sessionInSeconds\r\n                : this.state.breakInSeconds\r\n            }\r\n          />\r\n\r\n          <div className=\"bottom\">\r\n            <Break\r\n              plus={this.handleBreakPlus.bind(this)}\r\n              minus={this.handleBreakMinus.bind(this)}\r\n              breakLength={this.state.breakInMinutes}\r\n            />\r\n\r\n            <Session\r\n              plus={this.handleSessionPlus.bind(this)}\r\n              minus={this.handleSessionMinus.bind(this)}\r\n              sessionLength={this.state.sessionInMinutes}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Break extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"bottom-left\">\r\n        <h3 className=\"break-title\" style={{ textAlign: \"center\" }}>\r\n          Break Length\r\n        </h3>\r\n\r\n        <i onClick={this.props.plus} className=\"fas fa-plus plus\"></i>\r\n        <span className=\"length\">{this.props.breakLength}</span>\r\n        <i onClick={this.props.minus} className=\"fas fa-minus minus\"></i>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Break;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Session extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"bottom-right\">\r\n        <h3 style={{ textAlign: \"center\" }} className=\"session-title\">\r\n          Session Length\r\n        </h3>\r\n\r\n        <i\r\n          onClick={this.props.plus.bind(this)}\r\n          className=\"fas fa-plus plus\"\r\n        ></i>\r\n        <span className=\"length\">{this.props.sessionLength}</span>\r\n        <i\r\n          onClick={this.props.minus.bind(this)}\r\n          className=\"fas fa-minus minus\"\r\n        ></i>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Session;\r\n","import React,{Component} from 'react';\r\n\r\nclass Counter extends Component{\r\n    \r\n    render(){\r\n\r\n        const redGreenColor={color:this.props.totalSeconds<60?'red':'green'};\r\n \r\n        return(\r\n          <div className='top'>\r\n            <div className='title' >{this.props.title}</div>\r\n            <div className='timer' style={redGreenColor} >{this.props.timer}</div>\r\n            \r\n            <span onClick={this.props.startOrPause} className='start-pause' >\r\n               <i className=\"fas fa-play\"></i>\r\n               <i className=\"fas fa-pause\"></i>\r\n            </span>\r\n            \r\n            <i onClick={this.props.refresh} className=\"fas fa-sync-alt refresh\" ></i>\r\n            \r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counter;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}